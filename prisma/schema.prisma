generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

// TiDB is highly compatible with the MySQL 5.7 protocol and the common features 
// and syntax of MySQL 5.7.
//
// TiDB currently does not support foreign key constraints. If you need to use the feature of 
// referential integrity, you can use the application layer implementation of prisma.
//
// Refercene: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity#handling-the-referential-integrity-in-prisma
// Related Issue [WIP]: https://github.com/pingcap/tidb/issues/18209
// 
// More descriptions about MySQL compatibility:
// Refercene: https://docs.pingcap.com/tidb/dev/mysql-compatibility

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// 
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

model Author {
  id          BigInt   @id
  name        String   @db.VarChar(100)
  gender      Boolean?
  birthYear   Int?     @db.SmallInt @map("birth_year")
  deathYear   Int?     @db.SmallInt @map("death_year")
  books       BookAuthor[]
	@@map("authors")
}

model BookAuthor {
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   BigInt @map("book_id")
  author   Author @relation(fields: [authorId], references: [id])
  authorId BigInt @map("author_id")

  @@id([bookId, authorId])
	@@map("book_authors")
}

model Book {
  id           BigInt     @id
  title        String     @db.VarChar(100)
  type         BookType
  publishedAt  DateTime   @db.DateTime(0) @map("published_at")
  stock        Int        @default(0)
  price        Decimal    @default(0.0) @db.Decimal(15, 2)
  description  String?
  authors      BookAuthor[]
  ratings      Rating[]
  orders       Order[]
	@@map("books")
}

model Order {
  id          BigInt   @id @default(autoincrement())
  book        Book     @relation(fields: [bookId], references: [id])
  bookId      BigInt   @map("book_id")
  user        User     @relation(fields: [userId], references: [id])
  userId      BigInt   @map("user_id")
  quality     Int      @db.TinyInt
  orderedAt   DateTime @default(now()) @db.DateTime(0) @map("ordered_at")

  @@index([bookId])
	@@map("orders")
}

model Rating {
  book    Book     @relation(fields: [bookId], references: [id])
  bookId  BigInt   @map("book_id")
  user    User     @relation(fields: [userId], references: [id])
  userId  BigInt   @map("user_id")
  score   Int      @db.TinyInt
  ratedAt DateTime @default(now()) @db.DateTime(0) @map("rated_at")

  @@id([bookId, userId])
  @@unique([bookId, userId], map: "uniq_book_user_idx")
	@@map("ratings")
}

model User {
  id       BigInt   @id
  balance  Decimal  @default(0.0) @db.Decimal(15, 2)
  nickname String   @unique(map: "nickname") @db.VarChar(100)
  product  String?
  ui1      BigInt?
  ui2      BigInt?
  ui3      BigInt?
  ratings  Rating[]
  orders   Order[]

	@@map("users")
}

enum BookType {
  Magazine
  Novel
  Life
  Arts
  Comics
  Education_nbsp__amp__nbsp_Reference             @map("Education & Reference")
  Humanities_nbsp__amp__nbsp_Social_nbsp_Sciences @map("Humanities & Social Sciences")
  Science_nbsp__amp__nbsp_Technology              @map("Science & Technology")
  Kids
  Sports
	@@map("books_type")
}
model LoopCache {
    id      BigInt   @id @default(autoincrement())
    qnsans  QnsAns[]
}

model QnsAns {
    id    BigInt   @id @default(autoincrement())
    qns   String
    ans   String?
    loopCacheId BigInt
    loopCache   LoopCache @relation(fields: [loopCacheId], references: [id])
}
//npx prisma migrate dev --name add_loopcache_and_qnsans
